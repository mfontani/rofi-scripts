#!/usr/bin/env perl
use 5.020_000;
use warnings;
use utf8;
use open qw<:std :utf8>;

my $RX_WANT_STATS = qr{
    \A
    (?<key> [^:]+ ):
    \s+
    (?<value> \S.+ )
    \z
}xms;

# bindsym $mod+shift+v exec --no-startup-id rofi -modi vbox:rofi-vbox -show vbox

if (!@ARGV) {
    show_all_vms();
}
elsif (scalar @ARGV == 1) {
    manage_vm(split /\s/xms, $ARGV[0]);
}
else {
    die "Don't know what to do with @ARGV";
}
exit 0;

sub show_all_vms {
    my @lines = qx!VBoxManage list --long vms!;
    chomp @lines;
    my @vms;
    my %stats;
    for my $line (@lines) {
        # This is done first, as it starts a new stanza.
        # The stanza is only started if "Name:" starts at the start of the line,
        # AND there is MORE THAN one space.
        if ($line =~ m!\AName:\s\s+(\S.+)\s*\z!xms) {
            my $name = $1;
            push @vms, { %stats } if %stats;
            %stats = ();
            $stats{name} = $name;
            next;
        }
        if ($line =~ $RX_WANT_STATS) {
            my ($key, $value) = ($+{key}, $+{value});
            # DWIM removing the decimals from the "since 20XX-YY-ZZTHH:MM:SS.NNNNNNNNN)
            if ($key eq 'State' && $value =~ m!\A(?<state>.*?)\s+[(](?<since>.*)[.]\d+[)]\s*\z!xms) {
                $stats{State} = $+{state};
                $stats{Since} = $+{since};
            } else {
                $stats{ $key } = $value;
            }
        }
    }
    push @vms, { %stats } if %stats;
    my $name_sprintf = do {
        my $max_length_name = 1;
        for (@vms) {
            $max_length_name = length $_->{name}
                if length $_->{name} > $max_length_name;
        }
        "%-${max_length_name}s";
    };
    my $state_sprintf = do {
        my $max_length_state = 1;
        for (@vms) {
            $max_length_state = length $_->{State}
                if length $_->{State} > $max_length_state;
        }
        "%-${max_length_state}s";
    };
    my $since_sprintf = do {
        my $max_length_since = 1;
        for (@vms) {
            $max_length_since = length $_->{Since}
                if length $_->{Since} > $max_length_since;
        }
        "%-${max_length_since}s";
    };
    @vms = sort {
        $b->{State} cmp $a->{State}
        ||
        $b->{Since} cmp $a->{Since}
        ||
        $a->{name} cmp $b->{name}
    } @vms;
    my @all;
    for my $vm (@vms) {
        my $line = sprintf "$name_sprintf $state_sprintf $since_sprintf",
            $vm->{name},
            $vm->{State},
            $vm->{Since};
        $line .= " ($vm->{'Session name'})"
            if exists $vm->{'Session name'};
        push @all, $line;
    }
    say for @all;
}

sub manage_vm {
    my ($name, @rest) = @_;

    # What state is the VM in?
    my @lines = qx!VBoxManage showvminfo "$name"!;
    chomp @lines;
    my ($state) = map {
        my $s = $_;
        $s =~ s!\AState:\s+!!xmsg;
        $s;
    } grep { m!\AState:\s+!xms } @lines;
    die "Cannot find 'State:' for '$name'!"
        if !defined $state;

    if ($state =~ m!\Apowered[ ]off[ ]!xms) {
        # Start as headless.
        qx!VBoxManage startvm --type headless "$name"!;
    }
    elsif ($state =~ m!\Arunning[ ]!xms) {
        # Stop cleanly
        qx!VBoxManage controlvm "$name" acpipowerbutton!;
    }
    else {
        die "Don't know what to do with $name in state $state";
    }
}
